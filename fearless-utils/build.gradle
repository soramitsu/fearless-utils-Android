apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'
apply from: '../maven-publish-helper.gradle'

publishing {
    publications {
        release(MavenPublication) {
            groupId 'jp.co.soramitsu.fearless-utils'
        }
    }
}

android {
    compileSdkVersion rootProject.compileVersion
    defaultConfig {
        minSdkVersion rootProject.minVersion
        targetSdkVersion rootProject.targetVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    ndkVersion "25.2.9519653"
    //ndkVersion "22.1.7171670"

    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared/java"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared/java"
        }
    }
    lint {
        abortOnError false
    }
    namespace 'jp.co.soramitsu.fearless_utils'
}

cargo {
    module = "../sr25519-java/"
    libname = "sr25519java"
    targets = ["arm", "arm64", "x86", "x86_64"]
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
}

task deleteJar(type: Delete) {
    delete 'libs/jars/libfearless.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'libfearless.jar')
}

createJar.dependsOn(deleteJar, build)

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.madgag.spongycastle:bcpkix-jdk15on:1.58.0.0"
    implementation "com.madgag.spongycastle:bcpg-jdk15on:1.58.0.0"
    implementation "net.i2p.crypto:eddsa:0.3.0"
    implementation "com.caverock:androidsvg-aar:1.4"
    implementation "io.github.novacrypto:BIP39:2019.01.27"
    implementation "io.github.novacrypto:securestring:2019.01.27@jar"
    implementation "com.neovisionaries:nv-websocket-client:2.14"
    implementation "com.google.code.gson:gson:2.10.1"
    implementation "org.web3j:crypto:4.6.0-android"
    implementation "org.eclipse.birt.runtime.3_7_1:org.apache.xerces:2.9.0"
    implementation "org.lz4:lz4-java:1.7.1"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-inline:5.2.0"

    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "org.mockito:mockito-android:4.5.0"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
}

def computeVersionName() {
    def verMatcher = rootProject.versionName =~ /^([0-9]+\.[0-9]+)\.([0-9]+)$/
    if (!verMatcher.find()) {
        throw new GradleException("Invalid versionName!")
    }
    if (System.getenv('BUILD_ID') != null && System.getenv('BRANCH_NAME') != null && System.getenv('BRANCH_NAME') == 'develop') {
        return "${verMatcher.group(1)}.${System.getenv('BUILD_ID')}"
    } else {
        return "${rootProject.versionName}"
    }
}
